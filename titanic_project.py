# -*- coding: utf-8 -*-
"""titanic_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wURKjxFfx-58rp1FLakZSIwmFDdDP1YT

# Neural Network with Titanic Dataset

Serajus Salehin, ID : 2017-3-60-018
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline


# Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor

# Neural Network
#from tensorflow import keras
import keras

from keras.models import Sequential 
from keras.layers import Dense

# load the data
df_train = pd.read_csv('/content/train.csv')
df_test = pd.read_csv('/content/test.csv')
df = df_train.append(df_test , ignore_index = True)

print(df_train.shape, df_test.shape,df.shape)

"""### Pclass Analysis"""

df['Pclass'].isnull().sum()

df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()

"""### Name To Title"""

df.Name.head(10)

df['Title'] = df.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())

df['Title'].value_counts()

df['Title'] = df['Title'].replace('Mlle', 'Miss')
df['Title'] = df['Title'].replace(['Mme','Lady','Ms'], 'Mrs')
df.Title.loc[ (df.Title !=  'Master') & (df.Title !=  'Mr') & (df.Title !=  'Miss') 
             & (df.Title !=  'Mrs')] = 'Others'

df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()

df['Title'].value_counts()

df = pd.concat([df, pd.get_dummies(df['Title'])], axis=1).drop(labels=['Name'], axis=1)

"""### Sex(Male:0 Female:1)"""

df.Sex.isnull().sum()

df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()

df.Sex = df.Sex.map({'male':0, 'female':1})

"""











### Cabin(Dropped)"""

df.Cabin.isnull().sum(axis=0)

df = df.drop(labels=['Cabin'], axis=1)

"""### Embarked(Dropped)"""

df.Embarked.isnull().sum(axis=0)

df['Embarked'].value_counts()

df.Embarked.fillna('S' , inplace=True )

df[['Embarked', 'Survived','Pclass', 'Age']].groupby(['Embarked'], as_index=False).mean()

df = df.drop(labels='Embarked', axis=1)

"""### Age(RandomForestRegressor)"""

df.Age.isnull().sum()



df[['Title', 'Age']].groupby(['Title']).mean()

df[['Title', 'Age']].groupby(['Title']).std()

df_sub = df[['Age','Master','Miss','Mr','Mrs','Others','SibSp']]

X_train  = df_sub.dropna().drop('Age', axis=1)
y_train  = df['Age'].dropna()
X_test = df_sub.loc[np.isnan(df.Age)].drop('Age', axis=1)

regressor = RandomForestRegressor(n_estimators = 300)
regressor.fit(X_train, y_train)
y_pred = np.round(regressor.predict(X_test),1)
df.Age.loc[df.Age.isnull()] = y_pred
df.Age.isnull().sum(axis=0)

"""### Ticket Analysis"""

df.Ticket.isnull().sum()

df.Ticket.head(20)

df.Ticket = df.Ticket.map(lambda x: x[0])
df[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()

df['Ticket'].value_counts()

df['Ticket'] = df['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], 'others')

df[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()

df = pd.get_dummies(df,columns=['Ticket'])

"""## Trainning and Testing

"""

#from sklearn.model_selection import train_test_split
#df = df.drop(labels=['SibSp','Parch','Fare','Title','PassengerId'], axis=1)
#y_true=df["Survived"]
#X_train,X_test,y_train,y_test = train_test_split(df,y_true,test_size=0.2,random_state=0)

df = df.drop(labels=['SibSp','Parch','Fare','Title','PassengerId'], axis=1)
y_train = df[0:891]['Survived'].values
X_train = df[0:891].drop(['Survived'], axis=1).values
y_test  = df[891:].drop(['Survived'], axis=1).values

#from sklearn.metrics import accuracy_score
#from sklearn.metrics import confusion_matrix

#def Model(model,name):
#    model.fit(X_train,y_train)
#    score = model.score(X_test, y_test)
#    model_train_score = model.score(X_train, y_train)
#    model_test_score = model.score(X_test, y_test)
#    prediction = model.predict(X_test)
#    print('{} Trainng Score {}\n'.format(name,model_train_score))
#    print('{} Testing Score {}\n'.format(name,model_test_score))
#    print('{} Testing Score {}\n'.format(name,score))

#from sklearn import svm
#clf = svm.SVC()
#Model(clf,"SVM")

#from sklearn.linear_model import LogisticRegression
#lr=LogisticRegression()
#Model(lr,"Logistic Regression")

from keras.initializers import glorot_uniform
model = Sequential()
model.add(Dense(9, activation = 'relu', input_dim = 16))
model.add(Dense(9,  activation = 'relu'))
model.add(Dense(5,  activation = 'relu'))
model.add(Dense(1,  activation = 'sigmoid'))

model.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = ['accuracy'])

model.fit(X_train, y_train, batch_size = 32 , epochs = 500)

"""##Prediction"""

#y_pred = model.predict(X_test,batch_size=32)
#y_final = (y_pred > 0.5).astype(int).reshape(X_test.shape[0])

#predicted_table = pd.DataFrame({'PassengerId': df_test['PassengerId'],'Age': df_test['Age'],'Sex': df_test['Sex'], 'Survived': y_final})
#predicted_table.to_csv('/content/predicted.csv', index=False)